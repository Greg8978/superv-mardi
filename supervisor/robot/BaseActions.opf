;; -*-Lisp-*-
;;author: Michelangelo Fiore
;;this files contains procedures to move the robot

(

(defop |init|
  :invocation(!(BaseActions.init))
  :documentation "Inits the module"
  :body (
	 (=>(BaseActions.freeId 0))
	 (!(SEM-CREATE BaseActions.sem 1 SEM-FIFO))
	 (!(SEM-CREATE BaseActionsId.sem 1 SEM-FIFO))
	 )
  )

(defop |getFreeId|
  :invocation(!(BaseActions.getFreeId $id))
  :documentation "returns an available id for requestes"
  :body (
	 (!(SEM-P BaseActionsId.sem))
	 (?(BaseActions.freeId $id))
	 (=>(BaseActions.freeId (+ $id 1)))
	 (!(SEM-V BaseActionsId.sem))
	 )
  )

(defop |moveWaypoints|
  :invocation(BaseActions.action moveWaypoints @id)
  :documentation "Move the robot with the waypoints node"
  :body (
         (!(SEM-P BaseActions.sem))
         (IF(?(Softmotion.isActive TRUE))
            (!(SEND-MESSAGE WaypointNavigation (move)))
            (^(||(WaypointNavigation.report @report)(BaseActions.stop (VAL @id)) ))
            (IF(?(WaypointNavigation.report OK))
               (~>(WaypointNavigation.report OK))
               (=>(BaseActions.report @id "OK"))

               ELSEIF(?(BaseActions.stop (VAL @id)))
               (!(SEND-MESSAGE WaypointNavigation (stop)))
               (^(WaypointNavigation.stop.report @report))
               (~>(WaypointNavigation.stop.report (VAL @report)))
               (=>(BaseActions.report @id "STOPPED"))

               ELSE
               (=>(BaseActions.report @id "FAILURE"))
               )
            )
         )
  )

(defop |moveSeconds|
  :invocation(BaseActions.action moveSeconds @seconds @direction @id)
  :body (
	 (!(SEM-P BaseActions.sem))

          (?(BaseActions.bridgeName @name))
          (?(BaseActions.timeToWait @time))

	  (!(= @reportName1 (TERM-STRING-CAT (VAL @name) ".moveSeconds.report")))
          (!(= @reportName1 (MAKE-ATOM @reportName1)))

	 
	  (!(SEND-MESSAGE (VAL @name) (moveSeconds (VAL @seconds) (VAL @direction))))
	  
	  (^(|| (@reportName1 @report) (ELAPSED-TIME (TIME) (VAL @time)
						 (BaseActions.stop (VAL @id)))))

	  (IF(?(BaseActions.stop (VAL @id)))  ;;if we receive a stop request we send a stop to the ros node and wait for the reports
	     (!(BaseActions.getFreeId @stopId))
	     (=>(BaseActions.action stop (VAL @stopId)))
	     (!(ReportManager.sub BaseActions.report @stopId))
	     (^(BaseActions.report (VAL @stopId) @report))
	     (!(ReportManager.unsub BaseActions.report @stopId))
	     
	     (^(@reportName1 @status))
	     (~>(@reportName1 (VAL @status)))
	     
	     (!(ReportManager.publish BaseActions.report @id "STOPPED"))
	     
	     ELSEIF(?(@reportName1 OK))
	     (~>(@reportName1 @status))
	     (!(ReportManager.publish BaseActions.report @id "OK"))
	     )
	  (!(SEM-V BaseActions.sem))
	  )
  )


(defop |move|
  :invocation(BaseActions.action move @waypoints @id)
  :documentation "moves the robot through a list of waypoints"
  :body (
         (!(SEM-P BaseActions.sem))

         (IF(?(BaseActions.isActive SIM))
                                        ;(!(ReportManager.publish BaseActions.report @id "OK"))


            ELSEIF(?(BaseActions.isActive TRUE))
            (?(BaseActions.bridgeName @name))
            (?(BaseActions.timeToWait @time))

            ;;the ros node sends two kinds of messages: report signals that the robot has completed the task or the task has failed. Updates tells that the robot has reached the next waypoint.
            (!(= @reportName1 (TERM-STRING-CAT (VAL @name) ".move.report")))
            (!(= @reportName1 (MAKE-ATOM @reportName1)))

            (!(= @reportName2 (TERM-STRING-CAT (VAL @name) ".move.update")))
            (!(= @reportName2 (MAKE-ATOM @reportName2)))
	    (~>(Navigation.move.report @any1))
	    (~>(Navigation.move.update @any2))
                                        ;(IF(?(Softmotion.isActive TRUE))
            (WHILE(?(~(NULL @waypoints)))
                  (!(= @nextLocation (CAR @waypoints)))
                  (!(= @waypoints (CDR @waypoints)))
                  (!(SEND-MESSAGE @name (move euler @nextLocation)))

                  ;(^(|| (@reportName1 @status) (@reportName2 @status) (BaseActions.stop (VAL @id))))
;(ELAPSED-TIME (TIME) @time)))
		  (^(|| (Navigation.move.report @status) (Navigation.move.update @status2) (BaseActions.stop (VAL @id))))
  
                  (IF(?(BaseActions.stop (VAL @id)))  ;;if we receive a stop request we send a stop to the ros node and wait for the reports
                     (!(BaseActions.getFreeId @stopId))
                     (=>(BaseActions.action stop (VAL @stopId)))
                     (!(ReportManager.sub BaseActions.report @stopId))
                     (^(BaseActions.report (VAL @stopId) @report))
                     (!(ReportManager.unsub BaseActions.report @stopId))

                     (^(Navigation.move.report @status))
                     (^(Navigation.move.update @status2))
                     (~>(Navigation.move.report (VAL @status)))
                     (~>(Navigation.move.update (VAL @status2)))

                     (!(ReportManager.publish BaseActions.report @id "STOPPED"))

                     (!(= @completed TRUE))

                     ELSEIF(?(Navigation.move.report OK))
                     (~>(Navigation.move.report @status))
                     (=>(BaseActions.update @id "OK"))
                     ;;.location (VAL @nextLocation)))  ;;this should be handled by toaster so we ares it
                     ;; (IF(?(~(NULL @waypoints)))
                                        ;  (!(= @nextLocation (CAR @waypoints)))
                                        ;  (!(= @waypoints (CDR @waypoints)))
                    ; (!(ReportManager.publish BaseActions.report @id "OK"))


                     ELSEIF(?(Navigation.move.update OK))
                     (~>(Navigation.move.update @status2))
                     ;(!(ReportManager.publish BaseActions.report @id "OK"))

                    ; (!(= @completed TRUE))
                     ELSE
                     (~>(Navigation.move.report @status))
                     (~>(Navigation.move.update @status2))
                     (!(ReportManager.publish BaseActions.report @id "FAILURE"))
		     (!(SEM-V BaseActions.sem))

                     (!(FAILED))

                     )

                  (~>(Navigation.move.report @status))
                  (~>(Navigation.move.update @status2))

                                        ;              ELSE
                                        ;               (!(ReportManager.publish BaseActions.report @id "FAILURE"))
                                        ; )
                  )
            (!(ReportManager.publish BaseActions.report @id "OK"))

            (!(SEM-V BaseActions.sem))
            )
         )
  )

(defop |stop|
  :invocation(BaseActions.action stop @id)
  :documentation "halts the robot movement"
  :body (
     ;(IF(?(Softmotion.isActive TRUE))
        (?(BaseActions.bridgeName @name))
        (?(BaseActions.timeToWait @time))

        ;;after a stop we receive a stop.report message
        (!(= @reportName (TERM-STRING-CAT (VAL @name) ".stop.report")))
        (!(= @reportName (MAKE-ATOM @reportName)))
        (!(SEND-MESSAGE @name (stop)))
        (^(||(@reportName @report) (ELAPSED-TIME (TIME) @time)))
        (~>(@reportName @report))

        (!(ReportManager.publish BaseActions.report @id "OK"))

        ;)
     (!(ReportManager.publish BaseActions.report @id "OK"))

	 )
  )



   
)
